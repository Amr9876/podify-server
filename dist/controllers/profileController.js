"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsFollowing = exports.getPrivatePlaylistAudios = exports.getPlaylistAudios = exports.getFollowersProfilePublic = exports.getFollowingsProfile = exports.getFollowersProfile = exports.getAutoGeneratedPlaylist = exports.getRecommendByProfile = exports.getPublicPlaylist = exports.getPublicProfile = exports.getPublicUploads = exports.getUploads = exports.updateFollower = void 0;
const audio_1 = __importDefault(require("../models/audio"));
const autoGeneratedPlaylist_1 = __importDefault(require("../models/autoGeneratedPlaylist"));
const history_1 = __importDefault(require("../models/history"));
const playlist_1 = __importDefault(require("../models/playlist"));
const user_1 = __importDefault(require("../models/user"));
const helper_1 = require("../utils/helper");
const mongoose_1 = require("mongoose");
const updateFollower = async (req, res) => {
    const { profileId } = req.params;
    let status;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ message: "Profile id is not valid!" });
    const profile = await user_1.default.findById(profileId);
    if (!profile)
        return res.status(404).json({ message: "Profile not found!" });
    const arleadyFollowing = await user_1.default.findOne({
        _id: profileId,
        followers: req.user.id,
    });
    if (arleadyFollowing) {
        await user_1.default.findByIdAndUpdate(profileId, {
            $pull: { followers: req.user.id },
        });
        status = "removed";
    }
    else {
        await user_1.default.findByIdAndUpdate(profileId, {
            $addToSet: { followers: req.user.id },
        });
        status = "added";
    }
    if (status === "added") {
        await user_1.default.findByIdAndUpdate(req.user.id, {
            $addToSet: { followings: profileId },
        });
    }
    if (status === "removed") {
        await user_1.default.findByIdAndUpdate(req.user.id, {
            $pull: { followings: profileId },
        });
    }
    res.json({ status });
};
exports.updateFollower = updateFollower;
const getUploads = async (req, res) => {
    const { pageNo = "0", limit = "20" } = req.query;
    const data = await audio_1.default.find({ owner: req.user.id })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt");
    const audios = data.map((item) => ({
        id: item._id,
        title: item.title,
        about: item.about,
        category: item.category,
        file: item.file.url,
        poster: item.poster?.url,
        date: item.createdAt,
        owner: { name: req.user.name, id: req.user.id },
    }));
    res.json({ audios });
};
exports.getUploads = getUploads;
const getPublicUploads = async (req, res) => {
    const { profileId } = req.params;
    const { pageNo = "0", limit = "20" } = req.query;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ message: "Invalid Profile ID!" });
    const user = await user_1.default.findById(profileId);
    if (!user)
        return res.status(404).json({ message: "User not found!" });
    const data = await audio_1.default.find({ owner: profileId })
        .populate("owner")
        .skip(parseInt(pageNo) * parseInt(limit))
        .limit(parseInt(limit))
        .sort("-createdAt");
    const audios = data.map((item) => ({
        id: item._id,
        title: item.title,
        about: item.about,
        file: item.file.url,
        poster: item.poster?.url,
        date: item.createdAt,
        owner: { name: item.owner.name, id: item.owner._id },
    }));
    res.json({ audios });
};
exports.getPublicUploads = getPublicUploads;
const getPublicProfile = async (req, res) => {
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ message: "Profile Id is not valid!" });
    const user = await user_1.default.findById(profileId);
    if (!user)
        return res.status(404).json({ message: "User not found!" });
    res.json({
        profile: {
            id: user._id,
            name: user.name,
            followers: user.followers.length,
            avatar: user.avatar?.url,
        },
    });
};
exports.getPublicProfile = getPublicProfile;
const getPublicPlaylist = async (req, res) => {
    const { profileId } = req.params;
    const { pageNo = "0", limit = "20" } = req.query;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ message: "Profile id is invalid!" });
    const playlist = await playlist_1.default.find({
        owner: profileId,
        visibility: "public",
    })
        .skip(parseInt(pageNo) * parseInt(limit))
        .limit(parseInt(limit))
        .sort("-createdAt");
    if (!playlist)
        return res.json({ playlist: [] });
    res.json({
        playlist: playlist.map((item) => ({
            id: item._id,
            title: item.title,
            itemsCount: item.items.length,
            visibility: item.visibility,
        })),
    });
};
exports.getPublicPlaylist = getPublicPlaylist;
const getRecommendByProfile = async (req, res) => {
    const user = req.user;
    let matchOptions = {
        $match: { _id: { $exists: true } },
    };
    if (user) {
        const category = await (0, helper_1.getUsersPreviousHistory)(req);
        if (category.length) {
            matchOptions = { $match: { category: { $in: category } } };
        }
    }
    const audios = await audio_1.default.aggregate([
        matchOptions,
        {
            $sort: {
                "likes.count": -1,
            },
        },
        { $limit: 10 },
        {
            $lookup: {
                from: "users",
                localField: "owner",
                foreignField: "_id",
                as: "owner",
            },
        },
        { $unwind: "$owner" },
        {
            $project: {
                _id: 0,
                id: "$_id",
                title: "$title",
                about: "$about",
                category: "$category",
                file: "$file.url",
                poster: "$poster.url",
                owner: {
                    name: "$owner.name",
                    id: "$owner._id",
                },
            },
        },
    ]);
    res.json({ audios });
};
exports.getRecommendByProfile = getRecommendByProfile;
const getAutoGeneratedPlaylist = async (req, res) => {
    const [result] = await history_1.default.aggregate([
        { $match: { owner: req.user.id } },
        { $unwind: "$all" },
        { $group: { _id: "$all.audio", items: { $addToSet: "$all.audio" } } },
        { $sample: { size: 20 } },
        { $group: { _id: null, items: { $push: "$_id" } } },
    ]);
    const title = "Mix 20";
    if (result) {
        await playlist_1.default.updateOne({ owner: req.user.id, title }, { $set: { title, items: result.items, visibility: "auto" } }, { upsert: true });
    }
    const category = await (0, helper_1.getUsersPreviousHistory)(req);
    let matchOptions = {
        $match: { _id: { $exists: true } },
    };
    if (category.length) {
        matchOptions = {
            $match: {
                title: { $in: category },
            },
        };
    }
    const agpl = await autoGeneratedPlaylist_1.default.aggregate([
        matchOptions,
        { $sample: { size: 4 } },
        {
            $project: {
                _id: 0,
                id: "$_id",
                title: "$title",
                itemsCount: { $size: "$items" },
            },
        },
    ]);
    const playlist = await playlist_1.default.findOne({ owner: req.user.id, title });
    const finalList = agpl.concat({
        id: playlist?._id,
        title: playlist?.title,
        itemsCount: playlist?.items.length,
    });
    res.json({ playlist: finalList });
};
exports.getAutoGeneratedPlaylist = getAutoGeneratedPlaylist;
const getFollowersProfile = async (req, res) => {
    const { limit = "20", pageNo = "0" } = req.query;
    const [result] = await user_1.default.aggregate([
        { $match: { _id: req.user.id } },
        {
            $project: {
                followers: {
                    $slice: [
                        "$followers",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit),
                    ],
                },
            },
        },
        {
            $unwind: "$followers",
        },
        {
            $lookup: {
                from: "users",
                localField: "followers",
                foreignField: "_id",
                as: "userInfo",
            },
        },
        { $unwind: "$userInfo" },
        {
            $group: {
                _id: null,
                followers: {
                    $push: {
                        id: "$userInfo._id",
                        name: "$userInfo.name",
                        avatar: "$userInfo.avatar.url",
                    },
                },
            },
        },
    ]);
    if (!result) {
        return res.json({ followers: [] });
    }
    res.json({ followers: result.followers });
};
exports.getFollowersProfile = getFollowersProfile;
const getFollowingsProfile = async (req, res) => {
    const { limit = "20", pageNo = "0" } = req.query;
    const [result] = await user_1.default.aggregate([
        { $match: { _id: req.user.id } },
        {
            $project: {
                followings: {
                    $slice: [
                        "$followings",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit),
                    ],
                },
            },
        },
        {
            $unwind: "$followings",
        },
        {
            $lookup: {
                from: "users",
                localField: "followings",
                foreignField: "_id",
                as: "userInfo",
            },
        },
        { $unwind: "$userInfo" },
        {
            $group: {
                _id: null,
                followings: {
                    $push: {
                        id: "$userInfo._id",
                        name: "$userInfo.name",
                        avatar: "$userInfo.avatar.url",
                    },
                },
            },
        },
    ]);
    if (!result) {
        return res.json({ followings: [] });
    }
    res.json({ followings: result.followings });
};
exports.getFollowingsProfile = getFollowingsProfile;
const getFollowersProfilePublic = async (req, res) => {
    const { limit = "20", pageNo = "0" } = req.query;
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId)) {
        return res.status(422).json({ message: "Invalid profile id" });
    }
    const [result] = await user_1.default.aggregate([
        { $match: { _id: new mongoose_1.Types.ObjectId(profileId) } },
        {
            $project: {
                followers: {
                    $slice: [
                        "$followers",
                        parseInt(pageNo) * parseInt(limit),
                        parseInt(limit),
                    ],
                },
            },
        },
        {
            $unwind: "$followers",
        },
        {
            $lookup: {
                from: "users",
                localField: "followers",
                foreignField: "_id",
                as: "userInfo",
            },
        },
        { $unwind: "$userInfo" },
        {
            $group: {
                _id: null,
                followers: {
                    $push: {
                        id: "$userInfo._id",
                        name: "$userInfo.name",
                        avatar: "$userInfo.avatar.url",
                    },
                },
            },
        },
    ]);
    if (!result) {
        return res.json({ followers: [] });
    }
    res.json({ followers: result.followers });
};
exports.getFollowersProfilePublic = getFollowersProfilePublic;
const getPlaylistAudios = async (req, res) => {
    const { limit = "20", pageNo = "0" } = req.query;
    const { playlistId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(playlistId))
        return res.status(422).json({ message: "Invalid Playlist ID!" });
    const aggregatationLogic = [
        {
            $match: {
                _id: new mongoose_1.Types.ObjectId(playlistId),
                visibility: { $ne: "private" },
            },
        },
        {
            $project: {
                items: {
                    $slice: [
                        "$items",
                        parseInt(limit) * parseInt(pageNo),
                        parseInt(limit),
                    ],
                },
                title: "$title",
            },
        },
        { $unwind: "$items" },
        {
            $lookup: {
                from: "audios",
                localField: "items",
                foreignField: "_id",
                as: "audios",
            },
        },
        { $unwind: "$audios" },
        {
            $lookup: {
                from: "users",
                localField: "audios.owner",
                foreignField: "_id",
                as: "userInfo",
            },
        },
        { $unwind: "$userInfo" },
        {
            $group: {
                _id: {
                    id: "$_id",
                    title: "$title",
                },
                audios: {
                    $push: {
                        id: "$audios._id",
                        title: "$audios.title",
                        about: "$audios.about",
                        category: "$audios.category",
                        file: "$audios.file.url",
                        poster: "$audios.poster.url",
                        owner: { name: "$userInfo.name", id: "$userInfo._id" },
                    },
                },
            },
        },
        {
            $project: {
                _id: 0,
                id: "$_id.id",
                title: "$_id.title",
                audios: "$$ROOT.audios",
            },
        },
    ];
    const [playlistResult] = await playlist_1.default.aggregate(aggregatationLogic);
    if (!playlistResult) {
        const [autoPlaylistResult] = await autoGeneratedPlaylist_1.default.aggregate(aggregatationLogic);
        return res.json({ list: autoPlaylistResult });
    }
    res.json({ list: playlistResult });
};
exports.getPlaylistAudios = getPlaylistAudios;
const getPrivatePlaylistAudios = async (req, res) => {
    const { limit = "20", pageNo = "0" } = req.query;
    const { playlistId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(playlistId))
        return res.status(422).json({ message: "Invalid Playlist ID!" });
    const aggregatationLogic = [
        { $match: { _id: new mongoose_1.Types.ObjectId(playlistId), owner: req.user.id } },
        {
            $project: {
                items: {
                    $slice: [
                        "$items",
                        parseInt(limit) * parseInt(pageNo),
                        parseInt(limit),
                    ],
                },
                title: "$title",
            },
        },
        { $unwind: "$items" },
        {
            $lookup: {
                from: "audios",
                localField: "items",
                foreignField: "_id",
                as: "audios",
            },
        },
        { $unwind: "$audios" },
        {
            $lookup: {
                from: "users",
                localField: "audios.owner",
                foreignField: "_id",
                as: "userInfo",
            },
        },
        { $unwind: "$userInfo" },
        {
            $group: {
                _id: {
                    id: "$_id",
                    title: "$title",
                },
                audios: {
                    $push: {
                        id: "$audios._id",
                        title: "$audios.title",
                        about: "$audios.about",
                        category: "$audios.category",
                        file: "$audios.file.url",
                        poster: "$audios.poster.url",
                        owner: { name: "$userInfo.name", id: "$userInfo._id" },
                    },
                },
            },
        },
        {
            $project: {
                _id: 0,
                id: "$_id.id",
                title: "$_id.title",
                audios: "$$ROOT.audios",
            },
        },
    ];
    const [playlistResult] = await playlist_1.default.aggregate(aggregatationLogic);
    if (!playlistResult) {
        const [autoPlaylistResult] = await autoGeneratedPlaylist_1.default.aggregate(aggregatationLogic);
        return res.json({ list: autoPlaylistResult });
    }
    res.json({ list: playlistResult });
};
exports.getPrivatePlaylistAudios = getPrivatePlaylistAudios;
const getIsFollowing = async (req, res) => {
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ message: "Invalid Profile Id" });
    const user = await user_1.default.findOne({ _id: profileId, followers: req.user.id });
    res.json({ status: user ? true : false });
};
exports.getIsFollowing = getIsFollowing;
